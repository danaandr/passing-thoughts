{"ast":null,"code":"import _toConsumableArray from\"/Users/dana/Documents/projects/passing-thoughts/passing-thoughts-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/dana/Documents/projects/passing-thoughts/passing-thoughts-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import ReactDOM from'react-dom';import{AddThoughtForm}from'./AddThoughtForm';import{Thought}from'./Thought';import{generateId,getNewExpirationTime}from'./utilities';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([{id:generateId(),text:'This is a place for your passing thoughts.',expiresAt:getNewExpirationTime()},{id:generateId(),text:\"They'll be removed after 15 seconds.\",expiresAt:getNewExpirationTime()}]),_useState2=_slicedToArray(_useState,2),thoughts=_useState2[0],setThoughts=_useState2[1];//returns a new state: the array with a new thought at the front\nvar addThought=function addThought(thought){setThoughts(function(thoughts){return[thought].concat(_toConsumableArray(thoughts));});};//filter out the thought we want to remove\nvar removeThought=function removeThought(thoughtIdToRemove){setThoughts(function(thoughts){return thoughts.filter(function(thought){return thought.id!==thoughtIdToRemove;});});};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"logo\",children:/*#__PURE__*/_jsx(\"img\",{src:require('./logo.png'),alt:\"logo\",width:\"450\",height:\"450\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsx(AddThoughtForm,{addThought:addThought}),/*#__PURE__*/_jsx(\"ul\",{className:\"thoughts\",children:thoughts.map(function(thought){return/*#__PURE__*/_jsx(Thought,{thought:thought,removeThought:removeThought},thought.id);})})]})]});}ReactDOM.render(/*#__PURE__*/_jsx(App,{}),document.getElementById('app'));export default App;","map":{"version":3,"sources":["/Users/dana/Documents/projects/passing-thoughts/passing-thoughts-app/src/App.js"],"names":["React","useState","ReactDOM","AddThoughtForm","Thought","generateId","getNewExpirationTime","App","id","text","expiresAt","thoughts","setThoughts","addThought","thought","removeThought","thoughtIdToRemove","filter","require","map","render","document","getElementById"],"mappings":"4TAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,cAAT,KAA+B,kBAA/B,CACA,OAASC,OAAT,KAAwB,WAAxB,CACA,OAASC,UAAT,CAAqBC,oBAArB,KAAiD,aAAjD,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,cAAgCN,QAAQ,CAAC,CACvC,CACEO,EAAE,CAAEH,UAAU,EADhB,CAEEI,IAAI,CAAE,4CAFR,CAGEC,SAAS,CAAEJ,oBAAoB,EAHjC,CADuC,CAMvC,CACEE,EAAE,CAAEH,UAAU,EADhB,CAEEI,IAAI,CAAE,sCAFR,CAGEC,SAAS,CAAEJ,oBAAoB,EAHjC,CANuC,CAAD,CAAxC,wCAAOK,QAAP,eAAiBC,WAAjB,eAaF;AACE,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAa,CAC9BF,WAAW,CAAC,SAACD,QAAD,SAAeG,OAAf,4BAA0BH,QAA1B,IAAD,CAAX,CACK,CAFP,CAGF;AACA,GAAMI,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,iBAAD,CAAuB,CAC7CJ,WAAW,CAAC,SAACD,QAAD,QACZA,CAAAA,QAAQ,CAACM,MAAT,CAAgB,SAACH,OAAD,QAAaA,CAAAA,OAAO,CAACN,EAAR,GAAeQ,iBAA5B,EAAhB,CADY,EAAD,CAAX,CAGC,CAJD,CAME,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,eAAQ,SAAS,CAAC,MAAlB,uBACE,YAAK,GAAG,CAAEE,OAAO,CAAC,YAAD,CAAjB,CAAiC,GAAG,CAAC,MAArC,CAA4C,KAAK,CAAC,KAAlD,CAAwD,MAAM,CAAC,KAA/D,EADF,EADF,cAIE,qCACE,KAAC,cAAD,EAAgB,UAAU,CAAEL,UAA5B,EADF,cAEE,WAAI,SAAS,CAAC,UAAd,UACGF,QAAQ,CAACQ,GAAT,CAAa,SAACL,OAAD,qBACZ,KAAC,OAAD,EAA0B,OAAO,CAAEA,OAAnC,CAA4C,aAAa,CAAEC,aAA3D,EAAcD,OAAO,CAACN,EAAtB,CADY,EAAb,CADH,EAFF,GAJF,GADF,CAeD,CAEDN,QAAQ,CAACkB,MAAT,cAAgB,KAAC,GAAD,IAAhB,CAAyBC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAzB,EACA,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { AddThoughtForm } from './AddThoughtForm';\nimport { Thought } from './Thought';\nimport { generateId, getNewExpirationTime } from './utilities';\n\nfunction App() {\n  const [thoughts, setThoughts] = useState([\n    {\n      id: generateId(),\n      text: 'This is a place for your passing thoughts.',\n      expiresAt: getNewExpirationTime(),\n    },\n    {\n      id: generateId(),\n      text: \"They'll be removed after 15 seconds.\",\n      expiresAt: getNewExpirationTime(),\n    },\n  ]);\n\n//returns a new state: the array with a new thought at the front\n  const addThought = (thought) => {\n    setThoughts((thoughts) => [thought,...thoughts]);\n        }\n//filter out the thought we want to remove\nconst removeThought = (thoughtIdToRemove) => {\nsetThoughts((thoughts) => \nthoughts.filter((thought) => thought.id !== thoughtIdToRemove)\n);\n};\n\n  return (\n    <div className=\"App\">\n      <header className=\"logo\">\n        <img src={require('./logo.png')} alt=\"logo\" width=\"450\" height=\"450\"></img>\n      </header>\n      <main>\n        <AddThoughtForm addThought={addThought}/>\n        <ul className=\"thoughts\">\n          {thoughts.map((thought) => (\n            <Thought key={thought.id} thought={thought} removeThought={removeThought}/>\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\nexport default App;"]},"metadata":{},"sourceType":"module"}